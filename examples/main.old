#include <Arduino.h>
#include <esp_dmx.h>
#include <WiFi.h>
#include <PubSubClient.h>

/* First, lets define the hardware pins that we are using with our ESP32. We
  need to define which pin is transmitting data and which pin is receiving data.
  DMX circuits also often need to be told when we are transmitting and when we are
  receiving data. We can do this by defining an enable pin. */
int transmitPin = 17;
int receivePin = 16;
int enablePin = 5;

const char* ssid = "WIFI@MI";
const char* password = "UroQpUBRZ8khieu6NUBFXUGvB1HJvrxADd732Qjvp9MK9";
const char* mqtt_server = "192.168.255.75";

/* Next, lets decide which DMX port to use. The ESP32 has either 2 or 3 ports.
  Port 0 is typically used to transmit serial data back to your Serial Monitor,
  so we shouldn't use that port. Lets use port 2! */
dmx_port_t dmxPort = 1;

/* Now we want somewhere to store our DMX data. Since a single packet of DMX
  data can be up to 513 bytes long, we want our array to be at least that long.
  This library knows that the max DMX packet size is 513, so we can fill in the
  array size with `DMX_MAX_PACKET_SIZE`. */
byte data[DMX_MAX_PACKET_SIZE];
int lastValues[DMX_MAX_PACKET_SIZE];

/* The last variable that we need to read DMX is a queue handle. It's not
  important to know all the details about queues right now. All that you need to
  know is that when we receive a packet of DMX, our queue will be populated with
  an event that informs us that we've received new data. This allows us to wait
  until a new packet is received. Then we can then process the incoming data! */
QueueHandle_t queue;

/* The last few main variables that we need allow us to log data to the Serial
  Monitor. In this sketch, we want to log some information about the DMX we've
  received once every second. We'll declare a timer variable that will keep track
  of the amount of time that has elapsed since we last logged a serial message.
  We'll also want a flag that tracks if we are connected to the DMX controller so
  that we can log when we connect and when we disconnect. */
unsigned int timer = 0;
bool dmxIsConnected = false;

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

  // Feel free to add more if statements to control more GPIOs with MQTT

  // If a message is received on the topic esp32/output, you check if the message is either "on" or "off". 
  // Changes the output state according to the message
  if (String(topic) == "esp32/output") {
    Serial.print("Changing output to ");
    if(messageTemp == "on"){
      Serial.println("on");
      digitalWrite(BUILTIN_LED, HIGH);
    }
    else if(messageTemp == "off"){
      Serial.println("off");
      digitalWrite(BUILTIN_LED, LOW);
    }
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe
      client.subscribe("esp32/output");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  /* Start the serial connection back to the computer so that we can log
    messages to the Serial Monitor. Lets set the baud rate to 115200. */
  Serial.begin(115200);
  pinMode(BUILTIN_LED, OUTPUT);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  //client.setCallback(callback);

  /* Configure the DMX hardware to the default DMX settings and tell the DMX
    driver which hardware pins we are using. */
  dmx_config_t dmxConfig = DMX_DEFAULT_CONFIG;
  dmx_param_config(dmxPort, &dmxConfig);
  dmx_set_pin(dmxPort, transmitPin, receivePin, enablePin);

  /* Now we can install the DMX driver! We'll tell it which DMX port to use and
    how big our DMX packet is expected to be. We'll also pass to it our queue
    handle, some information about how many events we should store in our queue,
    and some interrupt priority information. Both the queue size and interrupt
    priority can be set to 1. */
  int queueSize = 1;
  int interruptPriority = 1;
  dmx_driver_install(dmxPort, DMX_MAX_PACKET_SIZE, queueSize, &queue, interruptPriority);
  for (int i = 0; i < DMX_MAX_PACKET_SIZE; i++) lastValues[i] = 0;
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now = millis();
  //if (now - lastMsg > 200) {
    lastMsg = now;

    /* We need a place to store information about the DMX packet we receive. We
      will use a dmx_event_t to store that packet information.  */
    dmx_event_t packet;

    /* And now we wait! The DMX standard defines the amount of time until DMX
      officially times out. That amount of time is converted into ESP32 clock ticks
      using the constant `DMX_RX_PACKET_TOUT_TICK`. If it takes longer than that
      amount of time to receive data, this if statement will evaluate to false. */
    if (xQueueReceive(queue, &packet, DMX_RX_PACKET_TOUT_TICK)) {

      /* If this code gets called, it means we've recieved DMX data! */

      /* We should check to make sure that there weren't any DMX errors. */
      if (packet.status == DMX_OK) {

        /* If this is the first DMX data we've received, lets log it! */
        if (!dmxIsConnected) {
          Serial.println("DMX connected!");
          dmxIsConnected = true;
        }

        /* We can read the DMX data into our buffer and increment our timer. */
        dmx_read_packet(dmxPort, data, packet.size);
        timer += packet.duration;

        /* Print a log message every 1 second (1,000,000 microseconds). */
        if (timer >= 1000000) {
          /* Print the received start code - it's usually 0.*/
          // Serial.printf("Start code is 0x%02X and slot 1 is 0x%02X\n", data[0], data[1]);
          Serial.print("Printing data array: ");
          for (int i = 1; i < sizeof(data); i++){
            Serial.printf("%D, ", data[i]);
            String topic = "dmx/" + String(i);
            int value = data[i];
            if (value != lastValues[i]){
              client.publish(topic.c_str(), String(value).c_str());
              lastValues[i] = value;
            }
            //client.publish(topic.c_str(), String(value).c_str());
          }
          Serial.println(sizeof(data));
          Serial.println();
          // Serial.println(data[0]);
          timer -= 1000000;
        }

      } else {
        /* Uh-oh! Something went wrong receiving DMX. */
        Serial.println("DMX error!");
      }

    } else if (dmxIsConnected) {
      /* If the DMX timed out, but we were previously connected, we will assume
        that there is no more DMX to read. So we can uninstall the DMX driver. */
      Serial.println("DMX timed out! Uninstalling DMX driver...");
      dmx_driver_delete(dmxPort);

      /* Stop the program. */
      while (true) yield();
    }
  //}
}