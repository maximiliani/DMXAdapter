#include <Arduino.h>
#include <esp_dmx.h>
#include <esp_now.h>
#include <WiFi.h>

// REPLACE WITH YOUR ESP RECEIVER'S MAC ADDRESS
uint8_t broadcastAddress1[] = {0x84, 0x0D, 0x8E, 0xB0, 0x86, 0xDC};

int transmitPin = 17;
int receivePin = 16;
int enablePin = 5;
dmx_port_t dmxPort = 1;
byte data[DMX_MAX_PACKET_SIZE];
int lastValues[DMX_MAX_PACKET_SIZE];
QueueHandle_t queue;
unsigned int timer = 0;
bool dmxIsConnected = false;

typedef struct test_struct {
  int x[DMX_MAX_PACKET_SIZE];
  int y;
} test_struct;

test_struct test;

esp_now_peer_info_t peerInfo;

void setupDMX() {
  dmx_config_t dmxConfig = DMX_DEFAULT_CONFIG;
  dmx_param_config(dmxPort, &dmxConfig);
  dmx_set_pin(dmxPort, transmitPin, receivePin, enablePin);

  int queueSize = 1;
  int interruptPriority = 1;
  dmx_driver_install(dmxPort, DMX_MAX_PACKET_SIZE, queueSize, &queue, interruptPriority);
  for (int i = 0; i < DMX_MAX_PACKET_SIZE; i++) lastValues[i] = 0;
}

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  char macStr[18];
  Serial.print("Packet to: ");
  // Copies the sender mac address to a string
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print(macStr);
  Serial.print(" send status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
void setup() {
  Serial.begin(115200);
 
  WiFi.mode(WIFI_STA);
 
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  esp_now_register_send_cb(OnDataSent);
   
  // register peer
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  // register first peer  
  memcpy(peerInfo.peer_addr, broadcastAddress1, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
//   // register second peer  
//   memcpy(peerInfo.peer_addr, broadcastAddress2, 6);
//   if (esp_now_add_peer(&peerInfo) != ESP_OK){
//     Serial.println("Failed to add peer");
//     return;
//   }
//   /// register third peer
//   memcpy(peerInfo.peer_addr, broadcastAddress3, 6);
//   if (esp_now_add_peer(&peerInfo) != ESP_OK){
//     Serial.println("Failed to add peer");
//     return;
//   }
}
 
void loop() {
    bool uniqueData = false;
    dmx_event_t packet;

    /* And now we wait! The DMX standard defines the amount of time until DMX
      officially times out. That amount of time is converted into ESP32 clock ticks
      using the constant `DMX_RX_PACKET_TOUT_TICK`. If it takes longer than that
      amount of time to receive data, this if statement will evaluate to false. */
    if (xQueueReceive(queue, &packet, DMX_RX_PACKET_TOUT_TICK)) {

      /* If this code gets called, it means we've recieved DMX data! */

      /* We should check to make sure that there weren't any DMX errors. */
      if (packet.status == DMX_OK) {

        /* If this is the first DMX data we've received, lets log it! */
        if (!dmxIsConnected) {
          Serial.println("DMX connected!");
          dmxIsConnected = true;
        }

        /* We can read the DMX data into our buffer and increment our timer. */
        dmx_read_packet(dmxPort, data, packet.size);
        timer += packet.duration;

        /* Print a log message every 1 second (1,000,000 microseconds). */
        if (timer >= 1000) {
          /* Print the received start code - it's usually 0.*/
          // Serial.printf("Start code is 0x%02X and slot 1 is 0x%02X\n", data[0], data[1]);
          Serial.println("Received DMX data on CH1: "+ String(data[1]));
          //Serial.print("Printing data array: ");
          for (int i = 1; i < sizeof(data); i++){
            //Serial.printf("%D, ", data[i]);
            String topic = "dmx/" + String(i);
            int value = data[i];
            if (value != lastValues[i]){
                uniqueData = true;
                //mqttClient.publish(topic.c_str(), 0, true, String(value).c_str());
              //client.publish(topic.c_str(), String(value).c_str());
                lastValues[i] = value;
            }
            //client.publish(topic.c_str(), String(value).c_str());
          }
          if (uniqueData){
            memccpy(test.x, lastValues, DMX_MAX_PACKET_SIZE, DMX_MAX_PACKET_SIZE);
            //test.x = lastValues;
            test.y = sizeof(lastValues);

            esp_err_t result = esp_now_send(0, (uint8_t *) &test, sizeof(test_struct));
   
            if (result == ESP_OK) {
                Serial.println("Sent with success");
            } else {
                Serial.println("Error sending the data");
            }
          }
          //Serial.println(sizeof(data));
          //Serial.println();
          // Serial.println(data[0]);
          timer -= 1000;
        }

      } else {
        /* Uh-oh! Something went wrong receiving DMX. */
        Serial.println("DMX error!");
      }

    } else if (dmxIsConnected) {
      /* If the DMX timed out, but we were previously connected, we will assume
        that there is no more DMX to read. So we can uninstall the DMX driver. */
      Serial.println("DMX timed out! Uninstalling DMX driver...");
      dmx_driver_delete(dmxPort);

      /* Stop the program. */
      while (true) yield();
    }

//   test.x = random(0,20);
//   test.y = random(0,20);
 
//   esp_err_t result = esp_now_send(0, (uint8_t *) &test, sizeof(test_struct));
   
//   if (result == ESP_OK) {
//     Serial.println("Sent with success");
//   }
//   else {
//     Serial.println("Error sending the data");
//   }
//   delay(2000);
}
